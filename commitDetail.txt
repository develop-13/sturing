커밋사항:  

성능 개선사항: 가장 큰 이미지에 loading = "eager" , 즉시 로딩 적용
로딩 UI를 클라이언트에서 랜더링 하지 않고 loading.tsx로 랜더링
서버 컴포넌트에서 공통 스터디 데이터 미리 가져와서 화면에 보여주기
조건 부로 보여주는 컴포넌트는 동적 렌더링
이미지 서버에서 랜더링

useCheckLogin 훅

서버에서 commonStudies가져오는 거랑 클라이언트에서 commonStudies 가져오는 거랑
성능 상 차이가 안보여서 서버로 가져오게끔 함.

+ Icon 컴포넌트 지연 로딩

recommendPage 몇몇 동적으로 가져오는 부분 다시 몇개 정적으로 가져오는 걸로 함
=> 다시 동적으로 되돌림

study/sid 페이지 최적화
- 서버에서 스터디 데이터 가져와서 전달해주기

동적 가져오기는 적용해도 점수가 오르지는 않았음


myStudy schedule 데이터 서버에서 가져오기 + 동적 가져오기

recuritment 페이지 동적 가져오기 적용 + 사용자 입력값 검사로직 추가

-- StudyOvierview는 서버에서 렌더링 하도록 해봄


-- 추후 MonthCalendarSchedule 랑 비교해서 공통로직 뺼 것

-- 추후 해야 할 일
현재 Board 페이지 상황
댓글 하나 추가할 때 마다 db에서 Board 데이터 전체를 가져온다. 
유지보수가 어렵다. 

이에 더해 대댓글까지 추가할 때 마다 Board 페이지전체를 렌더링 하는 건 좋은 선택이 아닐 것

추후에 대댓글까지 추가하게 된다면 
Board페이지에 
BoardSection이랑 
CommentSection 나눠놓은 다음에
각각의 컴포넌트에서 요청을 보내는 방식이 나을 것 같다. 

또 comment 스키마를 따로 분리하는게 나을 것 같다

+

스터디 상세 페이지에도 댓글 구현 -- 나중에

하지만 지금 그 작업을 하기에는 시간이 너무 없으므로 다음에 하자.